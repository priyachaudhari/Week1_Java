class Solution {
    public void solve(char[][] board) {
        
        if(board.length == 0 || board[0].length == 0)
            return;
        
        for(int i=0;i<board.length;i++){
            for(int j=0; j < board[0].length; j++){
                if(board[i][j] == 'O'){
                   board[i][j] = '-';
                }      
            }
        }
        
        for(int i=0; i<board[0].length;i++){
            if(board[0][i] == '-')
                dfs(board, 0, i);
        }
        
        for(int i=0; i<board.length;i++){
            if(board[i][0] == '-')
                dfs(board, i, 0);
        }
        
        for(int i=0; i<board[0].length;i++){
            if(board[board.length-1][i] == '-')
                dfs(board, board.length-1, i);
        }
        
        for(int i=0; i<board.length;i++){
            if(board[i][board[0].length-1] == '-')
                dfs(board, i, board[0].length-1);
        }
        
        for(int i=0;i<board.length;i++){
            for(int j=0; j < board[0].length; j++){
                if(board[i][j] == '-')
                   board[i][j] = 'X';      
            }
        }
          
    }
    
    public void dfs(char[][] board, int i, int j){
        
        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] == 'X' || board[i][j] == 'O')
            return;
        
            board[i][j] = 'O';
            dfs(board, i+1, j);
            dfs(board, i-1, j);
            dfs(board, i, j+1);
            dfs(board, i, j-1);
    }
}
