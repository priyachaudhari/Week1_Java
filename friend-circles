class UnionFind{
    
    private int[] parent;
    private int circleCount;
    
    public UnionFind(int m){
        parent = new int[m];
        for(int i=0; i < m;i++){
            parent[i] = i;
        }
    }
    
    public int find(int x){
        if(parent[x] == x)
            return x;
        
        return parent[x] = find(parent[x]);
    }
    
    public void union(int a, int b){
        int groupA = find(a);
        int groupB = find(b);
        
        if(groupA != groupB){
            parent[groupA] = groupB;
            circleCount--;
        }
    }
    
    public void setCircleCount(int circleCount){
        this.circleCount = circleCount;
    }
    
    public int getCircleCount(){
        return this.circleCount;
    } 
    
}


class Solution {
    public int findCircleNum(int[][] M) {
        
        if(M.length == 0 || M[0].length == 0){
            return 0;
        }
        
        int m = M.length, n= M[0].length;
        
        UnionFind unionfind = new UnionFind(m*n);
        unionfind.setCircleCount(m);
        
        for(int i=0; i <m;i++){
            for(int j=0; j<n; j++){
                if(M[i][j] == 1 && i != j){
                    unionfind.union(i,j);
                }
            }
        }
      
        return unionfind.getCircleCount();
    }
}
